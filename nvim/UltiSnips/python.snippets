snippet fut "future annotations"
from __future__ import annotations
endsnippet

snippet bp "breakpoint"
breakpoint()
endsnippet

snippet tt "timeit"
import time; "t" in locals() and print(1, time.time()-locals()["t"]); t=time.time()
endsnippet

snippet pp "pprint"
from pprint import pprint as pp
endsnippet

snippet ic "icecream"
from icecream import ic
ic(${0:${VISUAL}})
endsnippet

snippet dc "dataclass"
@dataclasses.datacass
class ${0:Name}:
	${1:x}: int
endsnippet

snippet fn "function"
def ${1:fname}(`!p snip.rv = "self, " if snip.indent else ""`$2) -> None:
	${3:${VISUAL:pass}}
endsnippet

snippet clsdata ""
@classmethod
def setUpTestData(cls):
	${1:${VISUAL:pass}}
endsnippet

snippet prop "property"
@property
def ${0:name}(self):
	return self.${0:name}
endsnippet

snippet cprop "cached property"
@property
def ${0:name}(self):
	if not hasattr(self, '_${0:name}'):
		pass
	return self._${0:name}
endsnippet

snippet main "__main__"
if __name__ == "__main__":
	pass
endsnippet

snippet init "__init__"
def __init__(self, ${1:*args, **kwargs}):
	super(${2:cls, self}).__init__($1)
endsnippet

snippet arg "description"
import argparse
parser = argparse.ArgumentParser()
parser.add_argument('${0:name}')
args = parser.parse_args()
${0:name} = args.${0:name}
endsnippet

snippet open "read file"
with open("${0:filename.txt}") as f:
	content = f.read()
endsnippet

snippet lc "List comprehension"
[${2:value} for $2 in ${1:${VISUAL:iterable}}]
endsnippet

snippet lci "List comprehension with filter"
[${2:value} for $2 in ${1:${VISUAL:iterable}} if ${3:condition}]
endsnippet
