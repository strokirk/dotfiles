snippet fut "future annotations"
	from __future__ import annotations

snippet typ "future annotations"
	from typing import TYPE_CHECKING
	if TYPE_CHECKING:
	    ${0:pass}

snippet bp "breakpoint"
	breakpoint()

snippet tt "timeit"
	import time; "t" in locals() and print(1, time.time()-locals()["t"]); t=time.time()

snippet pp "pprint"
	from pprint import pprint as pp

snippet ic "icecream"
	from icecream import ic
	ic($TM_SELECTED_TEXT)

snippet dc "dataclass"
	@dataclasses.datacass
	class ${0:Name}:
		$TM_CURRENT_LINE

snippet fn "function"
	def ${0:fname}(${1:arg}) -> None:
		$TM_SELECTED_TEXT

snippet clsdata ""
	@classmethod
	def setUpTestData(cls):
		$TM_SELECTED_TEXT

snippet main "__main__"
	def main():
		${0:pass}


	if __name__ == "__main__":
		main()

snippet args "description"
	import argparse
	parser = argparse.ArgumentParser()
	parser.add_argument('${0:name}')
	args = parser.parse_args()
	${0:name} = args.${0:name}

snippet init "__init__"
	def __init__(self, ${1:*args, **kwargs}):
		super().__init__($1)

snippet bp "breakpoint"
	breakpoint()

snippet prop "property"
	@property
	def ${0:name}(self):
		return self.${0:name}

snippet cprop "cached property"
	@property
	def ${0:name}(self):
		if not hasattr(self, '_${0:name}'):
			pass
		return self._${0:name}

snippet open "read file"
	with open("${0:filename.txt}") as f:
		content = f.read()

snippet op "Optional"
	$TM_SELECTED_TEXT | None

snippet lc "List comprehension"
	[${2:value} for $2 in $TM_SELECTED_TEXT]

snippet logger "Create logger"
	import logging
	logger = logging.getLogger(__name__)
