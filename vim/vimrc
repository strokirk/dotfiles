" vim: foldmethod=marker
" =========== "
" S:SETTINGS: "
" =========== "
" {{{1
"" GENERAL
filetype plugin on
syntax enable       " Syntax highlighting is enabled (and overrideable)
set nocompatible    " Doesn't really do anything since a vimrc is provided
set nobackup        " Honestly, local file backup is not so hot...
set noswapfile
set mouse=a
set history=1000
set backupext=.bak

"" EDITING
set autoindent           " Keep indent from previous line
set autoread             " Set to auto read from file when it is changed
set backspace=indent,eol,start     " Enable backspacing over everything in insert mode
set expandtab            " Make spaces not tabs! Tabs runs you out!
set enc=utf-8            " ascii is for loser
set formatoptions+=j     " Formatoptions: Combine comment lines intelligently with J
set hidden
set path+=**             " Improves the :find experience A LOT
set smartindent
set smarttab
set sw=4 tabstop=4       " Python development teaches you that 4 = good for indention
set wildmenu             " This is really funky
set wildignore=*.pyc
set fileencodings=ucs-bom,utf-8,sjis,default,latin1
set tags=./tags;,tags,./.git/tags

"" VISUAL
" set rnu           " Relative line numbers, only in vim 7.3+
set cpoptions+=n    " The "number" column used for wrapped text
set laststatus=2    " Always enable the statusline
set linebreak       " Wrap intelligently
set listchars=tab:▸\ ,trail:·,extends:❯,precedes:❮,nbsp:×,eol:¬
set number          " Turn on line number
set ruler           " Shows line & column number (not really necessary with my statusline)
set scrolloff=5     " Always keep 7 lines above and below cursor
set showcmd         " Shows the half-finished command when typed
set showmatch       " Show matching brackets when cursor is over one of them
set statusline=[%F]%h%r%m\ Buf-%n%=%c,%l/%L\ [%p%%]
au Filetype qf setlocal nowrap " Quicklist shouldn't wrap by default

"" SEARCH
set hlsearch        " Highlight makes things easier
set ignorecase
set incsearch       " Incremental search is a necessity
set smartcase
set nocompatible    " vi compatibility can lead to problems, I've heard

"" GUI
set background=dark
silent! colorscheme desert
if has('unix')
    set guifont=Droid\ Sans\ Mono\ 10
    language en_US.UTF-8
else
    set guifont=Meslo\ LG\ S:h9,Inconsolata:h11,Consolas:h9
    language English_US
endif
if has("gui")
    set vb
    set t_vb=
    set guifontwide=MS\ Gothic:h9
    set guioptions-=L   " Remove left and right scrollbar from vertically split
    set guioptions-=R   " windows. Those can cause problems on a docked gvim window
endif

" }}}

" ======================== "
" S:MAPPINGS AND COMMANDS: "
" ======================== "
" {{{

" Repeat 'default' mapping (Essential, instead of Enter Ex mode)
nmap Q @q
" Natural up/down movement over long lines
nnoremap j gj
nnoremap k gk
" Save with C-s
nnoremap <C-s> :update<CR>
" Redraw and remove highlight
nnoremap <silent> <C-l> :nohl<CR><C-l>
" Quick window resizing (thx kaldrenon!)
nnoremap ++ <C-w>+
nnoremap -- <C-w>-
" Follow tags more comfortably
nnoremap go <C-]>
" Select line characterwise (without whitespace)
nnoremap vv ^vg_
" Select the entire file
nnoremap VF VggoG
" I never use normal _, but g_ is often more useful than $
nnoremap _ g_

" Yank entire line / to end of line, without EOL
nnoremap gy ^v$hy
nnoremap Y yg_:echo "Yanked: ".@"<cr>

" * and # for selected text, trying to keep the search literal (in case of
" filenames, for example.)
vnoremap * "ly/\V<c-r>=escape(@l, '/\')<cr><cr>
vnoremap # "ly?\V<c-r>=escape(@l, '?\')<cr><cr>

" Utilize Swedish Characters:
let mapleader = 'å'
nmap ö [
nmap ä ]
nmap öö [[
nmap ää ]]
imap ¨ /
nmap ¨ /
cmap ¨ /

" More Bracket Navigation: extend ], [
nnoremap [q :cprev<cr>
nnoremap ]q :cnext<cr>
nnoremap [a :prev<cr>
nnoremap ]a :next<cr>
nnoremap [b :bprev<cr>
nnoremap ]b :bnext<cr>
nnoremap [t :tnext<cr>
nnoremap ]t :tprev<cr>
nnoremap <leader>d :bp \| bd #<cr>

" Follow tags in helpfiles with <CR> or <F1>
nmap <F1> <esc>
autocmd Filetype help nnoremap <buffer> <cr> <c-]>
autocmd Filetype help nnoremap <buffer> <F1> <c-]>
" Execute file on F5 (in various ways)
autocmd Filetype vim nnoremap <buffer> <F5> :source %<cr>
autocmd Filetype python nnoremap <buffer> <F5> :!python %<CR>
autocmd Filetype python nnoremap <buffer> <S-F5> :!python %
" Quicksave
nnoremap <F8> :w<cr>
" Use <F12> and <S-F12> to toggle wrapping and listing
nnoremap <F12> :set wrap!<cr>
nnoremap <F24> :set list!<cr>
" <F11> to set colorcolumn based on Github maxwidth
nnoremap <F11> :set colorcolumn=111<cr>


" Easier System Clipboard Interaction:
xnoremap <C-c> "*y
xnoremap gy "*y
noremap gy "*y
noremap ,y "*y
noremap ,p "*p
noremap ,P "*P

inoremap jj <Esc>
" inoremap <Tab> <Esc>
" nnoremap <Tab> <Esc>

"" Text Replacement with <Ctrl-r>
" By pressing <ctrl-r> in visual mode you will be prompted to enter text to replace with.
" Press enter and then confirm each change you agree with 'y' or decline with 'n'.
vnoremap <C-r> "ly:%s/<C-r>l//gc<left><left><left>

" Unload current buffer and go to previous. (Thanks Mud)
" Useful for keeping the window open, which :bd<cr> doesn't.
nnoremap <leader>d :bp <bar> bd #<cr>

" Quick :copen. Abbreviation avoids mistyping it as :copy
" Techically :cw might be faster, but I often tend to use copen when I shouldn't
cabbrev cop copen

" Other common misspellings
cabbrev Q q
cabbrev W w
cabbrev Wq wq
cabbrev Qall qall
cabbrev Wall wall
cabbrev Wqall wqall

" Search non-magically with * and # in visual mode
" Useful for text containing special characters, e.g. filenames or line-endings
function! NullToDollar(str)
    return substitute(substitute(a:str, '\%x00$', '\\$', ''), '\%x00', '\\$\\n', 'g')
endfunction
xnoremap * "ly/\V<c-r>=NullToDollar(escape(@l, '/\'))<cr><cr>
xnoremap # "ly?\V<c-r>=NullToDollar(escape(@l, '/\'))<cr><cr>

" s:Commands:
" Quick .vimrc editing
command! Vimrc tab drop $MYVIMRC
" Change current working directory to the current file's directory
command! WorkHere cd %:h
" Make current buffer a "Scratch" buffer
command! Temporary setlocal buftype=nofile bufhidden=hide noswapfile
" Copy current filename
command! CopyFilename let @"=@% | let @+=@% | let @*=@%

" Trim: trim all whitespace from end of lines
command! Trim exe "norm! ml" | keeppatterns %s/\s\+$//e | norm! `l
autocmd BufWritePre * Trim

" }}}

" ========== "
" S:PLUGINS: "
" ========== "
" {{{

" Tim Pope's Pathogen plugin
if exists("*pathogen#infect")
call pathogen#infect()
endif

let g:solarized_hitrail=1    " Highlight trailing whitespace
let g:airline_powerline_fonts=1

" Wait until every plugin have been loaded to add their mappings.
" autocmd VimEnter is useful for this.
autocmd VimEnter * call LoadPluginMappings()
function! LoadPluginMappings()
    " NERDTree
    if exists(":NERDTreeToggle")
        nnoremap <F4> :NERDTreeToggle<CR>
        nnoremap <c-t> :NERDTreeToggle<cr>
        nnoremap g<c-t> :NERDTreeFind<cr>
        com! NTF NERDTreeFind
    endif
    " Syntastic
    if exists(":SyntasticInfo")
        "let g:syntastic_python_checkers=['pylint', 'pyflakes', 'pep8']
        let g:syntastic_python_checkers=['pylint', 'pep8']
        nnoremap <F3> :SyntasticToggle<CR>
    endif
    let g:headlights_use_plugin_menu = 1
    let g:headlights_show_functions = 1
endfunction

" }}}

" ===============
" "General notes"
" ===============
" run :options to see a complete (?) list of vim plugins
"
" TODO: Put notes and information in it's own, proper section / document.
" TODO: Do something about swp files, they are a nuisance.
" TODO: Remove the bell. can be done with set vb t_vb=

" ReallyGood VimPlugins:
" + Pathogen - good old, trusty plugin manager by tpope
" + NERDTree
" + Surround.vim - should almost be included in default vim
" Ctrlp - :find with fuzzy search
" Emmet - Html expansion
" agvim - nice source code searching
" fugitive - for gblame
" gitgutter - for tracking git changes while your code
" vim-jedi - python autocompletion
" Other:
" Solarized - a colorscheme
" snipmate, coffee.vim, airline, Tabularize
