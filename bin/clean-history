#!/usr/bin/env python
import re
import typing as t
from collections import OrderedDict
from functools import partial
from pathlib import Path

History = t.List["HistoryEntry"]

HISTFILE = Path("~/.zsh_history")

filename_pattern = "[-a-zA-Z/_.=0-9]+"

exes = [
    "ag",
    "cat",
    "cd",
    "code",
    "fd",
    "gc",
    "gcb",
    "gcp",
    "gw",
    "kill",
    "ls",
    "mkdir",
    "nag",
    "ni",
    "nift",
    "nrg",
    "open",
    "pytest",
    "rg",
    "rm",
    "x",
    "z",
]

git_exes = [
    "add",
    "amend",
    "push",
    "rom",
    "wip",
    "add",
    "clean -f",
    "push -f",
    "branch -D",
    "branch -m",
    "fix",
    "unstage",
]


class HistoryEntry:
    def __init__(self, line: str) -> None:
        self.line = line
        time_part, self.command = line.split(";", maxsplit=1)
        _, self.time, count = time_part.split(":")
        self.count = int(count) or 1

    def __repr__(self) -> str:
        return self.line

    def __str__(self) -> str:
        return self.command

    @property
    def exe(self):
        exe, *args = self.command.strip().split(" ")
        return exe

    @property
    def args(self):
        exe, *args = self.command.strip().split(" ")
        return args

    def update_line(self) -> None:
        self.line = f":{self.time}:{self.count};{self.command}"


def common_commands(history: History) -> None:
    deduplicated_history = _deduplicate_history(history)
    common = [entry for entry in deduplicated_history if entry.count > 1]
    common = sorted(common, key=lambda e: e.count)
    for entry in common:
        print(f"{entry.count:>3}: {entry.command}")


def clean_history(history: History, write: bool) -> None:
    new_history = clean_common_commands(history)
    old_count = len(history)
    new_count = len(new_history)

    print("Deduplicating history entries...")
    new_history = _deduplicate_history(new_history)
    if write:
        write_history(new_history)
    print(f"History size went from {old_count} to {new_count}")


def _deduplicate_history(history: History) -> History:
    entries: t.Dict[str, HistoryEntry] = dict()
    for entry in history:
        if entry.command not in entries:
            entries[entry.command] = entry
            continue
        entries[entry.command].count += entry.count
        entries[entry.command].time = entry.time
        entries[entry.command].update_line()

    return sorted(entries.values(), key=lambda h: (h.count, h.time))


def clean_common_commands(history: History) -> History:
    patterns = [r"[a-z]{1,4}$", r"make \w*$"]
    for pattern in patterns:
        print(f"Cleaning pattern `{pattern}` from history...")
        re_pattern = re.compile(pattern)
        history = _clean_history(history, partial(filter_pattern, re_pattern))

    for exe in exes:
        print(f"Cleaning pattern `{exe}` from history...")
        history = _clean_history(history, partial(filter_exe, exe))

    for exe in git_exes:
        print(f"Cleaning pattern `git {exe}` from history...")
        history = _clean_history(history, partial(filter_git, exe))
    return history


def _clean_history(
    history: History, filter_func: t.Callable[[HistoryEntry], bool]
) -> History:
    out = []
    for entry in history:
        if filter_func(entry):
            print(f"Removing: {entry.command}")
            continue
        out.append(entry)
    return out


def is_filename(arg: str) -> bool:
    return bool(re.match(filename_pattern + "$", arg)) and arg[0] != "-"


def all_filenames(args: t.List[str]) -> bool:
    return all(is_filename(arg) for arg in args)


def filter_pattern(pattern: re.Pattern, entry: HistoryEntry) -> bool:
    return bool(pattern.match(entry.command))


def filter_exe(exe: str, entry: HistoryEntry) -> bool:
    return entry.exe == exe and all_filenames(entry.args)


def filter_git(pattern: str, entry: HistoryEntry) -> bool:
    if entry.exe in ("git", "g"):
        pattern_args = pattern.split(" ")
        if entry.args[: len(pattern_args)] == pattern_args:
            return all_filenames(entry.args[len(pattern_args) :])
    return False


def read_history() -> History:
    with open(HISTFILE.expanduser(), encoding="latin-1") as f:
        lines = f.read().splitlines()
    return [HistoryEntry(line) for line in lines if ":" in line]


def write_history(history: History) -> None:
    with open(HISTFILE.expanduser(), "w", encoding="latin-1") as f:
        f.write("\n".join([entry.line for entry in history]) + "\n")


if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser()
    parser.add_argument("--write", action="store_true")
    parser.add_argument("--common", action="store_true")
    args = parser.parse_args()

    history = read_history()
    if args.common:
        common_commands(history)
    else:
        clean_history(history, args.write)
